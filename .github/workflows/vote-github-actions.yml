name: Java CI with Gradle

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # 1. Java 22 세팅
      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          java-version: 22
          distribution: 'temurin'

      - name: Set yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.MYSQL_URL }}
          spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
          jwt.secret: ${{ secrets.JWT_SECRET }}
          

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: |
          ./gradlew build -x test

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/8bit-vote:latest .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/8bit-vote:latest

      - name: EC2 Docker Run
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker stop 8bit-vote
            docker rm 8bit-vote
            docker rmi ${{ secrets.DOCKER_USERNAME }}/8bit-vote:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/8bit-vote:latest
            docker run -d -p 80:8080 --name 8bit-vote ${{ secrets.DOCKERHUB_USERNAME }}8bit-vote:latest
